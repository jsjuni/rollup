% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rollup.R
\name{rollup}
\alias{rollup}
\title{Perform recursive analysis}
\usage{
rollup(tree, ds, update, validate_ds, validate_tree = default_validate_tree)
}
\arguments{
\item{tree}{An igraph directed graph that is a valid single-rooted in-tree}

\item{ds}{A data set to be updated; can be any object}

\item{update}{The update method called at each vertex as update(ds,
parent_key, child_keys)}

\item{validate_ds}{The data set validator called as validate_ds(tree, ds)}

\item{validate_tree}{The tree validator called as validate_tree(tree)}
}
\value{
The updated data set
}
\description{
\code{rollup()} traverses a tree in depth-first postorder and calls a
user-specified update method on each vertex, passing the method a data set, the key of
that vertex in the data set, and a list of child keys. The
update method returns the updated data set. The final result reflects an update at
every non-leaf vertex of the tree.

An \code{update_prop()} helper function is available to simplify building
compliant update methods.

Before beginning the traversal, \code{rollup()} calls a user-specified method
to validate that the tree is
well-formed (see \code{\link[=default_validate_tree]{default_validate_tree()}}). It also calls a user-specified
method to ensure that the data set
the id sets of the tree and data set are identical, and that data set
elements corresponding to leaf vertices in the tree satisfy some
user-specified predicate, e.g., \code{is.numeric()}.
}
\details{
The data set passed to \code{rollup()} can be any object for which an \code{update()}
method can be written. A common and simple example is a data frame, but
}
\examples{
rollup(wbs_tree, wbs_table,
  update = function(d, p, c) {
    if (length(c) > 0)
      d[d$id == p, c("work", "budget")] <-
        apply(d[is.element(d$id, c), c("work", "budget")], 2, sum)
      d
  },
  validate_ds = function(tree, ds) TRUE
)

}

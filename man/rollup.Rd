% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rollup.R
\name{rollup}
\alias{rollup}
\title{Perform Recursive Analysis}
\usage{
rollup(tree, ds, update, validate_ds, validate_tree = default_validate_tree)
}
\arguments{
\item{tree}{An igraph directed graph that is a valid single-rooted in-tree}

\item{ds}{A data set to be updated; can be any object}

\item{update}{The update method called at each vertex as update(ds,
parent_key, child_keys)}

\item{validate_ds}{The data set validator called as validate_ds(tree, ds)}

\item{validate_tree}{The tree validator called as validate_tree(tree)}
}
\value{
The updated data set
}
\description{
\code{rollup()} traverses a tree in depth-first postorder and calls a
user-specified update method on each vertex, passing it a data set, the id of
that vertex in the data set, and a list of child ids for that vertex. The
update method should perform the desired operation, update the data set, and
return the updated data set.

An \code{update_prop()} helper function is available to simplify building
compliant update methods.

Before beginning the traversal, \code{rollup()} ensures that the tree is
well-formed. It also ensures (by default, see \code{default_validate_tree()}) that
the id sets of the tree and data set are identical, and that data set
elements corresponding to leaf vertices in the tree satisfy some
user-specified predicate, e.g., \code{is.numeric()}.
}
\examples{

ds <- data.frame(id=c("a", "b", "c", "d", "e"), mass=c(NA,18.2,NA,5.2,9.9))
tree <- graph(c("b", "a", "c", "a", "d", "c", "e", "c"), directed = TRUE)
rollup(tree, ds,
  update = function(d, p, c) { if (length(c) > 0) d[d$id == p, "mass"] <- sum(d[is.element(d$id, c), "mass"]); d },
  validate_ds = function(tree, ds) TRUE
)

}
